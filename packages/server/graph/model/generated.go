// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CheckIn struct {
	ID          string      `json:"id"`
	Questions   []*Question `json:"questions"`
	User        *User       `json:"user"`
	Reviewer    *User       `json:"reviewer"`
	CreatedAt   time.Time   `json:"createdAt"`
	CompletedAt *time.Time  `json:"completedAt"`
	ReviewedAt  *time.Time  `json:"reviewedAt"`
	Review      *string     `json:"review"`
	ExpiresAt   time.Time   `json:"expiresAt"`
	Expired     bool        `json:"expired"`
}

type CreateCheckInInput struct {
	UserID string `json:"userID"`
}

type CreateOrganizationAndJoinInput struct {
	Name     string `json:"name"`
	Timezone string `json:"timezone"`
}

type LogInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type OrgSettingsInput struct {
	Timezone       string `json:"timezone"`
	CheckInWeekday int    `json:"checkInWeekday"`
}

type Organization struct {
	ID             string  `json:"id"`
	Name           string  `json:"name"`
	Members        []*User `json:"members"`
	Timezone       string  `json:"timezone"`
	CheckInWeekday int     `json:"checkInWeekday"`
}

type OrganizationInfo struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Question struct {
	ID           string       `json:"id"`
	Position     int          `json:"position"`
	QuestionType string       `json:"questionType"`
	Text         string       `json:"text"`
	ResponseType ResponseType `json:"responseType"`
	Responses    []*Response  `json:"responses"`
}

type Response struct {
	ID       string `json:"id"`
	Position int    `json:"position"`
	Response string `json:"response"`
}

type ResponseInput struct {
	QuestionID string `json:"questionID"`
	Position   int    `json:"position"`
	Response   string `json:"response"`
}

type ShoutOut struct {
	ID        string    `json:"id"`
	ShoutOut  string    `json:"shoutOut"`
	User      *User     `json:"user"`
	Receivers []*User   `json:"receivers"`
	CreatedAt time.Time `json:"createdAt"`
}

type ShoutOutInput struct {
	ShoutOut    string   `json:"shoutOut"`
	CheckInID   *string  `json:"checkInID"`
	ReceiverIDs []string `json:"receiverIDs"`
}

type SignUpWithOrgInput struct {
	OrganizationID string `json:"organizationID"`
	FirstName      string `json:"firstName"`
	LastName       string `json:"lastName"`
	Email          string `json:"email"`
	Password       string `json:"password"`
}

type SignUpWithoutOrgInput struct {
	OrganizationName     string `json:"organizationName"`
	OrganizationTimezone string `json:"organizationTimezone"`
	FirstName            string `json:"firstName"`
	LastName             string `json:"lastName"`
	Email                string `json:"email"`
	Password             string `json:"password"`
}

type SubmitCheckInResponsesInput struct {
	CheckInID string           `json:"checkInID"`
	Responses []*ResponseInput `json:"responses"`
}

type SubmitCheckInReviewInput struct {
	CheckInID string `json:"checkInID"`
	Review    string `json:"review"`
}

type User struct {
	ID           string        `json:"id"`
	FirstName    string        `json:"firstName"`
	LastName     string        `json:"lastName"`
	Email        string        `json:"email"`
	ReportsTo    *string       `json:"reportsTo"`
	Role         Role          `json:"role"`
	Organization *Organization `json:"organization"`
}

type ResponseType string

const (
	ResponseTypeScale ResponseType = "SCALE"
	ResponseTypeTask  ResponseType = "TASK"
	ResponseTypeText  ResponseType = "TEXT"
)

var AllResponseType = []ResponseType{
	ResponseTypeScale,
	ResponseTypeTask,
	ResponseTypeText,
}

func (e ResponseType) IsValid() bool {
	switch e {
	case ResponseTypeScale, ResponseTypeTask, ResponseTypeText:
		return true
	}
	return false
}

func (e ResponseType) String() string {
	return string(e)
}

func (e *ResponseType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResponseType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResponseType", str)
	}
	return nil
}

func (e ResponseType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
