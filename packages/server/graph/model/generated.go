// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type CheckIn struct {
	ID           string        `json:"id"`
	Organization *Organization `json:"organization"`
	User         *User         `json:"user"`
	Reviewer     *User         `json:"reviewer"`
	CreatedAt    time.Time     `json:"createdAt"`
}

type CreateCheckInInput struct {
	UserID string `json:"userID"`
}

type CreateOrganizationAndJoinInput struct {
	Name string `json:"name"`
}

type LogInInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Organization struct {
	ID      string  `json:"id"`
	Name    string  `json:"name"`
	Members []*User `json:"members"`
}

type OrganizationInfo struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type SignUpWithOrgInput struct {
	OrganizationID string `json:"organizationID"`
	FirstName      string `json:"firstName"`
	LastName       string `json:"lastName"`
	Email          string `json:"email"`
	Password       string `json:"password"`
}

type SignUpWithoutOrgInput struct {
	OrganizationName string `json:"organizationName"`
	FirstName        string `json:"firstName"`
	LastName         string `json:"lastName"`
	Email            string `json:"email"`
	Password         string `json:"password"`
}

type Team struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type UpdateUserPermissionsInput struct {
	ReportsTo *string `json:"reportsTo"`
	Role      *string `json:"role"`
}

type User struct {
	ID           string        `json:"id"`
	FirstName    string        `json:"firstName"`
	LastName     string        `json:"lastName"`
	Email        string        `json:"email"`
	ReportsTo    *string       `json:"reportsTo"`
	Role         Role          `json:"role"`
	Organization *Organization `json:"organization"`
}

type ResponseType string

const (
	ResponseTypeScale ResponseType = "SCALE"
	ResponseTypeTask  ResponseType = "TASK"
	ResponseTypeText  ResponseType = "TEXT"
)

var AllResponseType = []ResponseType{
	ResponseTypeScale,
	ResponseTypeTask,
	ResponseTypeText,
}

func (e ResponseType) IsValid() bool {
	switch e {
	case ResponseTypeScale, ResponseTypeTask, ResponseTypeText:
		return true
	}
	return false
}

func (e ResponseType) String() string {
	return string(e)
}

func (e *ResponseType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ResponseType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ResponseType", str)
	}
	return nil
}

func (e ResponseType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleAdmin Role = "ADMIN"
	RoleUser  Role = "USER"
)

var AllRole = []Role{
	RoleAdmin,
	RoleUser,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleUser:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
